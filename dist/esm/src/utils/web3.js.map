{"version":3,"file":"web3.js","sources":["../../../../src/utils/web3.js"],"sourcesContent":["import sha3 from 'js-sha3'\nimport { warn } from './environment'\n\nconst { keccak_256: keccak256 } = sha3\n\nconst EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000'\nconst TRANSACTION_REGEX = /^0x[A-Fa-f0-9]{64}$/\nconst ADDRESS_REGEX = /^0x[0-9a-fA-F]{40}$/\n\nconst TRUST_WALLET_BASE_URL =\n  'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum'\n\nconst ETHERSCAN_URL = 'etherscan.io'\nconst POLYGON_URL = 'polygonscan.com'\n\nconst NETWORK_TYPES_URLS = new Map([\n  ['main', ETHERSCAN_URL],\n  ['kovan', `kovan.${ETHERSCAN_URL}`],\n  ['rinkeby', `rinkeby.${ETHERSCAN_URL}`],\n  ['ropsten', `ropsten.${ETHERSCAN_URL}`],\n  ['goerli', `goerli.${ETHERSCAN_URL}`],\n  ['matic', POLYGON_URL],\n  ['mumbai', `mumbai.${POLYGON_URL}`],\n  ['harmony', `explorer.harmony.one`],\n  ['harmonyTest', `explorer.pops.one`],\n])\n\nconst URL_TYPES = new Map([\n  ['block', 'block'],\n  ['transaction', 'tx'],\n  ['address', 'address'],\n  ['token', 'token'],\n])\n\nfunction _getBlockExplorer({ type, value, networkType }) {\n  if (networkType === 'private') {\n    return ''\n  }\n\n  if (!NETWORK_TYPES_URLS.has(networkType)) {\n    throw new Error('network type not supported.')\n  }\n  if (!URL_TYPES.has(type)) {\n    throw new Error('type not supported.')\n  }\n\n  const subdomain = NETWORK_TYPES_URLS.get(networkType)\n  const typePart = URL_TYPES.get(type)\n  return `https://${subdomain}/${typePart}/${value}`\n}\n\n/**\n * Converts to a checksum address\n *\n * This function is taken from web3-utils:\n * https://github.com/ethereum/web3.js/blob/22df832303e349f8ae02f0392e56abe10e1dfaac/packages/web3-utils/src/index.js#L287-L315\n * And was adapted to use js-sha3 rather than soliditySha3.js from web3.js, in\n * order to avoid adding the BN.js and underscore dependencies.\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @returns {String}\n */\nfunction toChecksumAddress(address) {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    throw new Error(\n      'Given address \"' + address + '\" is not a valid Ethereum address.'\n    )\n  }\n\n  address = address.toLowerCase().replace(/^0x/i, '')\n\n  const addressHash = keccak256(address).replace(/^0x/i, '')\n  let checksumAddress = '0x'\n\n  for (let i = 0; i < address.length; i++) {\n    // If ith character is 9 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += address[i].toUpperCase()\n    } else {\n      checksumAddress += address[i]\n    }\n  }\n\n  return checksumAddress\n}\n\n/**\n * Check address equality without checksums\n * @param {string} first First address\n * @param {string} second Second address\n * @returns {boolean} Address equality\n */\nexport function addressesEqual(first, second) {\n  first = first && first.toLowerCase()\n  second = second && second.toLowerCase()\n  return first === second\n}\n\n/**\n * Shorten an Ethereum address. `charsLength` allows to change the number of\n * characters on both sides of the ellipsis.\n *\n * Examples:\n *   shortenAddress('0x19731977931271')    // 0x1973…1271\n *   shortenAddress('0x19731977931271', 2) // 0x19…71\n *   shortenAddress('0x197319')            // 0x197319 (already short enough)\n *\n * @param {string} address The address to shorten\n * @param {number} [charsLength=4] The number of characters to change on both sides of the ellipsis\n * @returns {string} The shortened address\n */\nexport function shortenAddress(address, charsLength = 4) {\n  const prefixLength = 2 // \"0x\"\n  if (!address) {\n    return ''\n  }\n  if (address.length < charsLength * 2 + prefixLength) {\n    return address\n  }\n  return (\n    address.slice(0, charsLength + prefixLength) +\n    '…' +\n    address.slice(-charsLength)\n  )\n}\n\n/**\n * Alias for shortenAddress (to generalize its use)\n */\nexport const shortenTransaction = shortenAddress\n\n/**\n *\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {string} address the given HEX address\n * @returns {boolean}\n */\nexport function isAddress(address) {\n  return ADDRESS_REGEX.test(address)\n}\n\n/**\n *\n * Checks if the given string is a transaction\n *\n * @method isTransaction\n * @param {string} address the given HEX address\n * @returns {boolean}\n */\nexport function isTransaction(transaction) {\n  return TRANSACTION_REGEX.test(transaction)\n}\n\n/**\n * Generates an etherscan URL\n *\n * @param {string} type The type of URL (block, transaction, address or token).\n * @param {string} value Identifier of the object, depending on the type (block number, transaction hash, …).\n * @param {object} options The optional parameters.\n * @param {string} options.networkType The Ethereum network type (main, kovan, rinkeby, ropsten, goerli, or private).\n * @returns {string} The generated URL, or an empty string if the parameters are invalid.\n */\nexport function blockExplorerUrl(type, value, { networkType = 'main' } = {}) {\n  try {\n    return _getBlockExplorer({ type, value, networkType })\n  } catch (err) {\n    warn(`blockExplorerUrl(): ${err.message}`)\n    return ''\n  }\n}\n\n/**\n * Get the address of a token icon\n *\n * @param {string} address The contract address of the token, or the zero address (0x000…) to get the Ethereum icon.\n * @returns {string} The generated URL, or an empty string if the parameters are invalid.\n */\nexport function tokenIconUrl(address = '') {\n  try {\n    address = toChecksumAddress(address.trim())\n  } catch (err) {\n    return ''\n  }\n\n  if (address === EMPTY_ADDRESS) {\n    return `${TRUST_WALLET_BASE_URL}/info/logo.png`\n  }\n\n  return `${TRUST_WALLET_BASE_URL}/assets/${address}/logo.png`\n}\n"],"names":["keccak_256","keccak256","sha3","EMPTY_ADDRESS","TRANSACTION_REGEX","ADDRESS_REGEX","TRUST_WALLET_BASE_URL","ETHERSCAN_URL","POLYGON_URL","NETWORK_TYPES_URLS","Map","URL_TYPES","_getBlockExplorer","type","value","networkType","has","Error","subdomain","get","typePart","toChecksumAddress","address","test","toLowerCase","replace","addressHash","checksumAddress","i","length","parseInt","toUpperCase","addressesEqual","first","second","shortenAddress","charsLength","prefixLength","slice","shortenTransaction","isAddress","isTransaction","transaction","blockExplorerUrl","err","warn","message","tokenIconUrl","trim"],"mappings":"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"}