{"version":3,"file":"math.js","sources":["../../../../src/utils/math.js"],"sourcesContent":["import JSBI from 'jsbi'\n\n/**\n * Re-maps a number from one range to another.\n *\n * In the example above, the number '25' is converted from a value in the range\n * 0..100 into a value that ranges from the left edge (0) to the right edge\n * (width) of the screen. Numbers outside the range are not clamped to 0 and 1,\n * because out-of-range values are often intentional and useful.\n *\n * From Processing.js\n *\n * @param {Number} value        The incoming value to be converted\n * @param {Number} istart       Lower bound of the value's current range\n * @param {Number} istop        Upper bound of the value's current range\n * @param {Number} ostart       Lower bound of the value's target range\n * @param {Number} ostop        Upper bound of the value's target range\n * @returns {Number}\n */\nexport function map(value, istart, istop, ostart, ostop) {\n  return ostart + (ostop - ostart) * ((value - istart) / (istop - istart))\n}\n\n/**\n * Normalizes a number from another range into a value between 0 and 1.\n *\n * Identical to map(value, low, high, 0, 1)\n * Numbers outside the range are not clamped to 0 and 1, because out-of-range\n * values are often intentional and useful.\n *\n * From Processing.js\n *\n * @param {Number} aNumber    The incoming value to be converted\n * @param {Number} low        Lower bound of the value's current range\n * @param {Number} high       Upper bound of the value's current range\n * @returns {Number}\n */\nexport function norm(aNumber, low, high) {\n  return (aNumber - low) / (high - low)\n}\n\n/**\n * Calculates a number between two numbers at a specific increment. The\n * progress parameter is the amount to interpolate between the two values where\n * 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is\n * half-way in between, etc. The lerp function is convenient for creating\n * motion along a straight path and for drawing dotted lines.\n *\n * From Processing.js\n *\n * @param {Number} progress     between 0.0 and 1.0\n * @param {Number} value1       first value\n * @param {Number} value2       second value\n * @returns {Number}\n */\nexport function lerp(progress, value1, value2) {\n  return (value2 - value1) * progress + value1\n}\n\n/**\n * Constrains a value to not exceed a maximum and minimum value.\n *\n * From Processing.js\n *\n * @param {Number} value   the value to constrain\n * @param {Number} value   minimum limit\n * @param {Number} value   maximum limit\n * @returns {Number}\n */\nexport function clamp(value, min = 0, max = 1) {\n  return Math.min(max, Math.max(min, value))\n}\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Note: Using Math.round() would give a non-uniform distribution\n *\n * From Mozilla MDN\n *\n * @param {Number} min    The minimum number (included)\n * @param {Number} max    The maximum number (excluded)\n * @returns {Number}\n */\nexport function randomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\n/**\n * Random number between two values.\n *\n * From Mozilla MDN\n *\n * @param {Number} min The minimum number (included)\n * @param {Number} max The maximum number (excluded)\n * @returns {Number}\n */\nexport function random(min = 0, max = 1) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\n/**\n * Divide and round two big integers.\n *\n * @param {BigInt|string|number} dividend Integer to be divided + rounded\n * @param {BigInt|string|number} divisor  Divisor\n * @returns {string}\n */\nexport function divideRoundBigInt(dividend, divisor) {\n  dividend = JSBI.BigInt(String(dividend))\n  divisor = JSBI.BigInt(String(divisor))\n  return JSBI.divide(\n    JSBI.add(dividend, JSBI.divide(divisor, JSBI.BigInt(2))),\n    divisor\n  ).toString()\n}\n"],"names":["map","value","istart","istop","ostart","ostop","norm","aNumber","low","high","lerp","progress","value1","value2","clamp","min","max","Math","randomInt","ceil","floor","random","divideRoundBigInt","dividend","divisor","JSBI","BigInt","String","divide","add","toString"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASA,GAAT,CAAaC,KAAb,EAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,MAAnC,EAA2CC,KAA3C,EAAkD;AACvD,SAAOD,MAAM,GAAG,CAACC,KAAK,GAAGD,MAAT,KAAoB,CAACH,KAAK,GAAGC,MAAT,KAAoBC,KAAK,GAAGD,MAA5B,CAApB,CAAhB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,IAAT,CAAcC,OAAd,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACvC,SAAO,CAACF,OAAO,GAAGC,GAAX,KAAmBC,IAAI,GAAGD,GAA1B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,IAAT,CAAcC,QAAd,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwC;AAC7C,SAAO,CAACA,MAAM,GAAGD,MAAV,IAAoBD,QAApB,GAA+BC,MAAtC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASE,KAAT,CAAeb,KAAf,EAAsBc,GAAG,GAAG,CAA5B,EAA+BC,GAAG,GAAG,CAArC,EAAwC;AAC7C,SAAOC,IAAI,CAACF,GAAL,CAASC,GAAT,EAAcC,IAAI,CAACD,GAAL,CAASD,GAAT,EAAcd,KAAd,CAAd,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASiB,SAAT,CAAmBH,GAAnB,EAAwBC,GAAxB,EAA6B;AAClCD,EAAAA,GAAG,GAAGE,IAAI,CAACE,IAAL,CAAUJ,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGC,IAAI,CAACG,KAAL,CAAWJ,GAAX,CAAN;AACA,SAAOC,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACI,MAAL,MAAiBL,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASM,MAAT,CAAgBN,GAAG,GAAG,CAAtB,EAAyBC,GAAG,GAAG,CAA/B,EAAkC;AACvC,SAAOC,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACI,MAAL,MAAiBL,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASO,iBAAT,CAA2BC,QAA3B,EAAqCC,OAArC,EAA8C;AACnDD,EAAAA,QAAQ,GAAGE,IAAI,CAACC,MAAL,CAAYC,MAAM,CAACJ,QAAD,CAAlB,CAAX;AACAC,EAAAA,OAAO,GAAGC,IAAI,CAACC,MAAL,CAAYC,MAAM,CAACH,OAAD,CAAlB,CAAV;AACA,SAAOC,IAAI,CAACG,MAAL,CACLH,IAAI,CAACI,GAAL,CAASN,QAAT,EAAmBE,IAAI,CAACG,MAAL,CAAYJ,OAAZ,EAAqBC,IAAI,CAACC,MAAL,CAAY,CAAZ,CAArB,CAAnB,CADK,EAELF,OAFK,EAGLM,QAHK,EAAP;AAID;;;;"}