{"version":3,"file":"TableView.js","sources":["../src/components/DataView/TableView.js"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Transition, animated } from 'react-spring'\nimport { GU, springs, textStyle } from '../../style'\nimport { useTheme } from '../../theme'\nimport { useLayout } from '../Layout/Layout'\nimport Checkbox from '../Input/Checkbox'\nimport { ToggleButton } from './ToggleButton'\nimport { OpenedSurfaceBorder } from './OpenedSurfaceBorder'\n\n// Table heading cells\nfunction headingsFromFields(\n  fields,\n  { hasAnyActions, hasAnyExpansion, selectContent, selectable }\n) {\n  const cells = fields.map((field, index) => [\n    field.label,\n    field.align === 'end' ? 'right' : 'left',\n  ])\n\n  if (hasAnyExpansion || selectable) {\n    cells.unshift([selectable ? selectContent : null, 'left'])\n  }\n\n  if (hasAnyActions) {\n    cells.push([null, 'left'])\n  }\n\n  // Return null if all the fields are empty\n  if (cells.every(cell => !cell[0])) {\n    return null\n  }\n\n  return cells\n}\n\nfunction cellsFromEntry(\n  entry,\n  {\n    fields,\n    hasAnyActions,\n    hasAnyExpansion,\n    hasExpansion,\n    selectContent,\n    selectable,\n    toggleChildContent,\n  }\n) {\n  const cells = entry.entryNodes.map((content, index) => [\n    content,\n    fields[index].align,\n    false,\n  ])\n\n  // Checkbox\n  if (selectable) {\n    cells.unshift([selectContent, 'start', true])\n  }\n\n  // Toggle child\n  if (!selectable && hasAnyExpansion) {\n    cells.unshift([hasExpansion && toggleChildContent, 'start', true])\n  }\n\n  // Actions\n  if (hasAnyActions) {\n    cells.push([entry.actions, 'end', true])\n  }\n\n  return cells\n}\n\nfunction TableView({\n  alignChildOnField,\n  allSelected,\n  entries,\n  fields,\n  hasAnyActions,\n  hasAnyExpansion,\n  onSelect,\n  onSelectAll,\n  renderSelectionCount,\n  rowHeight,\n  selectable,\n  selectedCount,\n}) {\n  const [opened, setOpened] = useState(-1)\n\n  const toggleEntry = useCallback(index => {\n    setOpened(opened => (opened === index ? -1 : index))\n  }, [])\n\n  const headCells = useMemo(\n    () =>\n      headingsFromFields(fields, {\n        hasAnyActions,\n        hasAnyExpansion,\n        selectContent: (\n          <Checkbox\n            indeterminate={allSelected === 0}\n            checked={allSelected > -1}\n            onChange={onSelectAll}\n          />\n        ),\n        selectable,\n      }),\n    [\n      fields,\n      hasAnyActions,\n      hasAnyExpansion,\n      allSelected,\n      onSelectAll,\n      selectable,\n    ]\n  )\n\n  return (\n    <table\n      css={`\n        width: 100%;\n        border-spacing: 0;\n        border-collapse: separate;\n      `}\n    >\n      {headCells && (\n        <thead>\n          <HeadRow\n            cells={headCells}\n            selectedCount={selectedCount}\n            renderSelectionCount={renderSelectionCount}\n          />\n        </thead>\n      )}\n      <tbody>\n        {entries.map((entry, index) => (\n          <Entry\n            key={entry.index}\n            alignChildOnField={alignChildOnField}\n            entry={entry}\n            fields={fields}\n            firstRow={index === 0}\n            hasAnyActions={hasAnyActions}\n            hasAnyExpansion={hasAnyExpansion}\n            onSelect={onSelect}\n            onToggle={toggleEntry}\n            opened={opened === entry.index}\n            rowHeight={rowHeight}\n            selectable={selectable}\n          />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nTableView.propTypes = {\n  alignChildOnField: PropTypes.number.isRequired,\n  allSelected: PropTypes.oneOf([-1, 0, 1]).isRequired,\n  entries: PropTypes.array.isRequired,\n  fields: PropTypes.array.isRequired,\n  hasAnyActions: PropTypes.bool.isRequired,\n  hasAnyExpansion: PropTypes.bool.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onSelectAll: PropTypes.func.isRequired,\n  renderSelectionCount: PropTypes.func.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  selectable: PropTypes.bool.isRequired,\n  selectedCount: PropTypes.number.isRequired,\n}\n\n// Disable prop types check for internal components\n/* eslint-disable react/prop-types */\n\nfunction useSidePadding() {\n  const { layoutName } = useLayout()\n  return layoutName === 'small' ? 2 * GU : 3 * GU\n}\n\nfunction HeadRow({ cells, selectedCount, renderSelectionCount }) {\n  const theme = useTheme()\n  const sidePadding = useSidePadding()\n  return (\n    <tr>\n      {cells.map((cell, index) => {\n        const hidden = selectedCount > 0 && index > 1\n        const content =\n          selectedCount > 0 && index === 1\n            ? renderSelectionCount(selectedCount)\n            : cell[0]\n        return (\n          !hidden && (\n            <th\n              key={index}\n              css={`\n                height: ${4 * GU}px;\n                padding: 0;\n                padding-left: ${index === 0 ? sidePadding : 0}px;\n                padding-right: ${index === cells.length - 1\n                  ? sidePadding\n                  : 0}px;\n                text-align: ${cell[1]};\n                ${textStyle('label2')};\n                color: ${theme.surfaceContentSecondary};\n                border-bottom: 1px solid ${theme.border};\n              `}\n              colSpan={selectedCount > 0 && index === 1 ? cells.length - 1 : 1}\n            >\n              {content}\n            </th>\n          )\n        )\n      })}\n    </tr>\n  )\n}\n\nconst Entry = React.memo(function Entry({\n  alignChildOnField,\n  entry,\n  fields,\n  firstRow,\n  hasAnyActions,\n  hasAnyExpansion,\n  onSelect,\n  onToggle,\n  opened,\n  rowHeight,\n  selectable,\n}) {\n  const hasExpansion = entry.expansion.content.length > 0\n  const entryIndex = entry.index\n\n  const handleToggle = useCallback(() => {\n    onToggle(entryIndex)\n  }, [entryIndex, onToggle])\n\n  const handleSelectChange = useCallback(\n    check => {\n      onSelect(entryIndex, check)\n    },\n    [entryIndex, onSelect]\n  )\n\n  const cells = cellsFromEntry(entry, {\n    fields,\n    hasAnyActions,\n    hasAnyExpansion,\n    hasExpansion,\n    selectable,\n    toggleChildContent: hasAnyExpansion ? (\n      <Toggle opened={opened} onToggle={handleToggle} />\n    ) : null,\n    selectContent: selectable ? (\n      <Checkbox onChange={handleSelectChange} checked={entry.selected} />\n    ) : null,\n  })\n\n  return (\n    <React.Fragment>\n      <EntryRow\n        cells={cells}\n        firstRow={firstRow}\n        rowHeight={rowHeight}\n        selected={entry.selected}\n      />\n      {hasExpansion && (\n        <EntryExpansion\n          alignChildOnCell={alignChildOnField + 1}\n          cellsCount={cells.length}\n          expansion={entry.expansion}\n          opened={opened}\n          rowHeight={rowHeight}\n        />\n      )}\n    </React.Fragment>\n  )\n})\n\nfunction EntryRow({ firstRow, cells, selected, rowHeight, mode }) {\n  const theme = useTheme()\n  const sidePadding = useSidePadding()\n\n  return (\n    <tr\n      css={`\n        transition: background 150ms ease-in-out;\n        background: ${selected ? theme.surfaceSelected : 'none'};\n      `}\n    >\n      {cells.map(([content, align, compact], index, cells) => {\n        const first = index === 0\n        const last = index === cells.length - 1\n        return (\n          <td\n            key={index}\n            css={`\n              position: relative;\n              width: ${compact\n                ? '1px' // For some reason Blink tends to make 0 grow but not 1px\n                : 'auto'};\n              height: ${rowHeight}px;\n              padding-top: 0;\n              padding-bottom: 0;\n              padding-left: ${first || compact ? sidePadding : 0}px;\n              padding-right: ${(!first && (align !== 'end' || last)) || compact\n                ? sidePadding\n                : 0}px;\n              border-top: ${firstRow ? '0' : `1px solid ${theme.border}`};\n            `}\n          >\n            <div\n              css={`\n                display: flex;\n                width: 100%;\n                justify-content: ${`flex-${align}`};\n              `}\n            >\n              {content}\n            </div>\n          </td>\n        )\n      })}\n    </tr>\n  )\n}\n\nfunction EntryExpansion({\n  alignChildOnCell,\n  cellsCount,\n  expansion,\n  opened,\n  rowHeight,\n}) {\n  const theme = useTheme()\n\n  // Handles the height of the expansion in free layout mode\n  const [freeLayoutContentHeight, setFreeLayoutContentHeight] = useState(0)\n\n  // We don't want to memoize this callback because we need to query for a new height\n  // and cover updates when entries get re-ordered\n  const handleFreeLayoutContentRef = element => {\n    if (element) {\n      setFreeLayoutContentHeight(element.getBoundingClientRect().height)\n    }\n  }\n\n  const contentHeight = expansion.freeLayout\n    ? freeLayoutContentHeight\n    : rowHeight * expansion.content.length\n\n  return (\n    <Transition\n      native\n      unique\n      items={opened}\n      from={{ height: 0 }}\n      enter={{ height: contentHeight }}\n      update={{ height: contentHeight }}\n      leave={{ height: 0 }}\n      config={{ ...springs.smooth, precision: 0.1 }}\n    >\n      {show =>\n        show &&\n        (({ height }) => (\n          <tr\n            css={`\n              td {\n                position: relative;\n                padding: 0;\n                box-shadow: inset 0 6px 4px -4px rgba(0, 0, 0, 0.16);\n                background: ${theme.surfaceUnder};\n              }\n            `}\n          >\n            {alignChildOnCell > 0 && (\n              <td colSpan={alignChildOnCell}>\n                <OpenedSurfaceBorder opened={opened} />\n                <animated.div\n                  css=\"overflow: hidden\"\n                  style={{\n                    height: height.interpolate(h =>\n                      h !== contentHeight ? `${h}px` : 'auto'\n                    ),\n                  }}\n                >\n                  {expansion.content.map((child, i) => (\n                    <div\n                      key={i}\n                      css={`\n                        height: ${expansion.freeLayout\n                          ? 'auto'\n                          : `${rowHeight}px`};\n                        border-top: 1px solid ${theme.border};\n                      `}\n                    />\n                  ))}\n                </animated.div>\n              </td>\n            )}\n            <td\n              colSpan={\n                alignChildOnCell === -1\n                  ? cellsCount\n                  : cellsCount - alignChildOnCell\n              }\n            >\n              {alignChildOnCell === 0 && (\n                <OpenedSurfaceBorder opened={opened} />\n              )}\n              <animated.div\n                css=\"overflow: hidden\"\n                style={{\n                  height: height.interpolate(h =>\n                    h !== contentHeight ? `${h}px` : 'auto'\n                  ),\n                }}\n              >\n                {expansion.content.map((child, i) => (\n                  <div\n                    key={i}\n                    ref={\n                      expansion.freeLayout ? handleFreeLayoutContentRef : null\n                    }\n                    css={`\n                      display: flex;\n                      align-items: center;\n                      height: ${expansion.freeLayout\n                        ? 'auto'\n                        : `${rowHeight}px`};\n                      padding-left: ${alignChildOnCell < 1 ? 3 * GU : 0}px;\n                      padding-right: ${3 * GU}px;\n                      border-top: 1px solid ${theme.border};\n                    `}\n                  >\n                    {child}\n                  </div>\n                ))}\n              </animated.div>\n            </td>\n          </tr>\n        ))\n      }\n    </Transition>\n  )\n}\n\nconst Toggle = React.memo(function Toggle({ opened, onToggle }) {\n  return (\n    <div\n      css={`\n        width: 100%;\n        height: 100%;\n      `}\n    >\n      <OpenedSurfaceBorder opened={opened} />\n      <ToggleButton opened={opened} onClick={onToggle} />\n    </div>\n  )\n})\n\n/* eslint-enable react/prop-types */\n\nexport { TableView }\n"],"names":["headingsFromFields","fields","hasAnyActions","hasAnyExpansion","selectContent","selectable","cells","map","field","index","label","align","unshift","push","every","cell","cellsFromEntry","entry","hasExpansion","toggleChildContent","entryNodes","content","actions","TableView","alignChildOnField","allSelected","entries","onSelect","onSelectAll","renderSelectionCount","rowHeight","selectedCount","opened","setOpened","useState","toggleEntry","useCallback","headCells","useMemo","React","Checkbox","propTypes","PropTypes","number","isRequired","oneOf","array","bool","func","useSidePadding","layoutName","useLayout","GU","HeadRow","theme","useTheme","sidePadding","hidden","length","textStyle","surfaceContentSecondary","border","Entry","memo","firstRow","onToggle","expansion","entryIndex","handleToggle","handleSelectChange","check","selected","EntryRow","mode","surfaceSelected","compact","first","last","EntryExpansion","alignChildOnCell","cellsCount","freeLayoutContentHeight","setFreeLayoutContentHeight","handleFreeLayoutContentRef","element","getBoundingClientRect","height","contentHeight","freeLayout","Transition","springs","smooth","precision","show","surfaceUnder","OpenedSurfaceBorder","interpolate","h","child","i","Toggle","ToggleButton"],"mappings":"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"}